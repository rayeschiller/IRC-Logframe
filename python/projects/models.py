# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models
from django.contrib.auth.models import User

from django.urls import reverse


class BaseMetadata(models.Model):
    """
    Model to add fields common among some models.
    """
    created_at = models.DateTimeField(auto_now_add=True)  # Time is added only when this models is first created
    updated_at = models.DateTimeField(auto_now=True)  # Auto_now auto updates the field every time this model's save() method is called

    class Meta:
        abstract = True


class Donor(BaseMetadata):
    """
    A donor represent the person that backs the project.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    is_organization = models.BooleanField(default=False)

    def __str__(self):
        return str(self.user)
    
    def __unicode__(self):
        return self.__str__()


class OutcomeArea(BaseMetadata):
    """
    There are 5 outcome areas.
    """
    title = models.CharField(max_length=255)


class SupportingDocument(BaseMetadata):
    file = models.FileField(upload_to='supporting_documents/')


class SubOutcome(BaseMetadata):
    title = models.CharField(max_length=255)
    area = models.ForeignKey(OutcomeArea, on_delete=models.CASCADE)
    parent = models.ForeignKey('projects.SubOutcome', blank=True, null=True)
    supporting_documents = models.ManyToManyField(SupportingDocument, blank=True)  # Only for level 3


class Indicator(BaseMetadata):
    is_oef = models.BooleanField(default=False)
    suboutcome_area = models.ForeignKey(SubOutcome, on_delete=models.CASCADE)


class Project(BaseMetadata):
    """
    Project is a logframe
    id: Is auto generated by Django. id and pk are the same.
    """
    otis_id = models.IntegerField(null=True, blank=True)
    title = models.CharField(max_length=255)
    goal = models.TextField()
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, blank=True, null=True, related_name='created_by')  # The person that creates the project.
    modified_by = models.ForeignKey(User, on_delete=models.SET_NULL, blank=True, null=True, related_name='modified_by')
    donor = models.ForeignKey(Donor, on_delete=models.CASCADE)  # A donor may have one to many projects.

    def __str__(self):
        return self.title

    def __unicode__(self):
        return self.__str__()


class Output(BaseMetadata):
    """
    The expected result of the objectives and indicators. 
    """
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    description = models.TextField()
    suboutcome_areas = models.ManyToManyField(SubOutcome, through='OutputToSubOutcome', blank=True)


class OutputToSubOutcome(BaseMetadata):
    """
    Adds metadata to the output to suboutcome.
    """
    output = models.ForeignKey(Output, on_delete=models.CASCADE)
    suboutcome = models.ForeignKey(SubOutcome, on_delete=models.CASCADE)
    percent = models.DecimalField(max_digits=10, decimal_places=2, default=1, help_text='Percentage of output on suboutcome area')


class Objective(BaseMetadata):
    """
    An objective within a logframe
    id: Is auto generated by Django.
    """
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    description = models.TextField()
    outcome_areas = models.ManyToManyField(OutcomeArea, blank=True)


class Comment(BaseMetadata):
    """
    A comment added to a project(logframe)
    """
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    text = models.TextField()
    commenter = models.ForeignKey(User, on_delete=models.CASCADE)
